import numpy as np
from PIL import Image
import os
import time
import cv2

def integralImage(img):
    s=np.zeros(img.shape)
    ii=np.zeros(img.shape)
    for y in range(img.shape[0]):
        for x in range(img.shape[1]):
            if y==0:
                s[y,x]=img[y,x]
            else:
                s[y,x]=img[y,x]+s[y-1,x]
            if x==0:
                ii[y,x]=s[y,x]
            else:
                ii[y,x]=s[y,x]+ii[y,x-1]
    return ii

def regionSum(ii,topLeft,bottomRight):
    x1=int(topLeft[0])-1
    y1=int(topLeft[1])-1
    x2=int(bottomRight[0])
    y2=int(bottomRight[1])
    if not (topLeft[0]==0 or topLeft[1]==0):     
        return ii[y2,x2]+ii[y1,x1]-ii[y1,x2]-ii[y2,x1]
    else:
        if topLeft[0]==0 and topLeft[1]==0:
            return ii[y2,x2]
        elif topLeft[0]==0:
            return ii[y2,x2]-ii[y1,x2]
        elif topLeft[1]==0:
            return ii[y2,x2]-ii[y2,x1]
        

class haarFeature():
    def __init__(self,featureType,topLeft,width,height):
        self.featureType=featureType
        self.topLeft=topLeft
        self.width=width
        self.height=height
        
    def getProperty(self):
        return (self.featureType,self.topLeft,self.width,self.height)
    
    def getScore(self,img):
        featureType=self.featureType
        topLeft=self.topLeft
        width=self.width
        height=self.height
        score=0
        bottomRight=(topLeft[0]+width-1,topLeft[1]+height-1)
        if featureType=="twoVerticle":
            area1=regionSum(img,topLeft,(topLeft[0]+width-1,topLeft[1]+height/2-1))
            area2=regionSum(img,(topLeft[0],topLeft[1]+height/2),bottomRight)
            score=area1-area2
        elif featureType=="twoHorizontal":
            area1=regionSum(img,topLeft,(topLeft[0]+width/2-1,topLeft[1]+height-1))
            area2=regionSum(img,(topLeft[0]+width/2,topLeft[1]),bottomRight)
            score=area1-area2
        elif featureType=="threeHorizontal":
            area1=regionSum(img,topLeft,(topLeft[0]+width/3-1,topLeft[1]+height-1))
            area2=regionSum(img,(topLeft[0]+width/3,topLeft[1]),(topLeft[0]+2*width/3-1,topLeft[1]+height-1))
            area3=regionSum(img,(topLeft[0]+2*width/3,topLeft[1]),bottomRight)
            score=area1+area3-area2
        elif featureType=="threeVerticle":
            area1=regionSum(img,topLeft,(topLeft[0]+width-1,topLeft[1]+height/3-1))
            area2=regionSum(img,(topLeft[0],topLeft[1]+height/3),(topLeft[0]+width-1,topLeft[1]+2*height/3-1))
            area3=regionSum(img,(topLeft[0],topLeft[1]+2*height/3),bottomRight)
            score=area1+area3-area2
        elif featureType=="four":
            area1=regionSum(img,topLeft,(topLeft[0]+width/2-1,topLeft[1]+height/2-1))
            area2=regionSum(img,(topLeft[0]+width/2,topLeft[1]),(topLeft[0]+width-1,topLeft[1]+height/2-1))
            area3=regionSum(img,(topLeft[0],topLeft[1]+height/2),(topLeft[0]+width/2-1,topLeft[1]+height-1))
            area4=regionSum(img,(topLeft[0]+width/2,topLeft[1]+height/2),bottomRight)
            score=area1+area4-area2-area3
        return score
        
def extractFeature(imgWidth,imgHeight,maxWidth,maxHeight):
    features=[]
    nums=[]
    featureTypes=[("twoVerticle",(1,2)),("twoHorizontal",(2,1)),
                  ("threeHorizontal",(3,1)),("threeVerticle",(1,3)),("four",(2,2))]
    for type,size in featureTypes:
        num=0
        for width in range(size[0],maxWidth+1,size[0]):
            for height in range(size[1],maxHeight+1,size[1]):
                for x in range(imgWidth-width+1):
                    for y in range(imgHeight-height+1):
                        features.append(haarFeature(type,(x,y),width,height))
                        num+=1
        nums.append(num)
    print('The total number of haar features is {}, there are {} type 1 features, {} type 2 features, {} type 3 features, {} type 4 features, {} type 5 features'.format(len(features),nums[0],nums[1],nums[2],nums[3],nums[4]))
    return features

def classifier(feature,img,threshold,polarity):
    score=feature.getScore(img)
    if polarity*score<polarity*threshold:
        return 1
    else:
        return 0

def findPara(imgs,w,feature,posW,negW,theta,numPos,numNeg,values):
    candidates=[]
    num=len(imgs)
    for i in range(num):
        candidates.append((values[i],w[i],i))
    bestError=1
    candidates.sort(key=lambda x: x[0])
    pos=0
    neg=0
    for candidate,weight,i in candidates:
        if imgs[i][1]==1:
            pos+=w[i]
        else:
            neg+=w[i]
        if theta*neg+(1-theta)*(posW-pos)<bestError and theta*neg+(1-theta)*(posW-pos)>0:
            polarity=1
            threshold=candidate
            bestError=theta*neg+(1-theta)*(posW-pos)
            FP=neg
            FN=posW-pos
        if (1-theta)*pos+theta*(negW-neg)<bestError and (1-theta)*pos+theta*(negW-neg)>0:
            polarity=-1
            threshold=candidate
            bestError=(1-theta)*pos+theta*(negW-neg)
            FP=negW-neg
            FN=pos
    return (threshold,polarity,bestError,FP,FN)

def isWrong(vote,label):
    if vote!=label:
        return 1
    else:
        return 0

def learn(positiveImg,negativeImg,features,values,boostRound,start,theta):
    numPos=len(positiveImg)
    numNeg=len(negativeImg)
    num=numPos+numNeg
    imgs=positiveImg+negativeImg
    w=[0]*num
    bestFeatures=[]
    alpha=[]
    for i in range(num):
        if imgs[i][1]==1:
            w[i]=1/(2*numPos)
        else:
            w[i]=1/(2*numNeg)
    paras=[]
    for t in range(boostRound):
        posW=0
        negW=0
        for i in range(len(w)):
            w[i]/=sum(w)
        for i in range(len(w)):
            if imgs[i][1]==1:
                posW+=w[i]
            else:
                negW+=w[i]
        bestError=1
        index=0
        for feature in features:
            threshold,polarity,error,FP,FN=findPara(imgs,w,feature,posW,negW,theta,numPos,numNeg,values[index])
            index+=1
            if error<=bestError:
                bestError=error
                bestFeature=feature
                para=(threshold,polarity)
        paras.append(para)
        bestFeatures.append(bestFeature)
        beta=bestError/(1-bestError)
        alpha.append(np.log(1/beta))
        threshold,polarity=para
        for i in range(len(w)):
            vote=classifier(bestFeature,imgs[i][0],threshold,polarity)
            label=imgs[i][1]
            if isWrong(vote,label):
                w[i]*=1
            else:
                w[i]*=beta
        end = time.time()
    print('Learning time spent: {:.1f} s'.format(end-start))
    return (bestFeatures,paras,alpha)

def predict(img,alpha,bestFeatures,paras):
    s=0
    for i in range(len(bestFeatures)):
        threshold,polarity=paras[i]
        score=bestFeatures[i].getScore(img)
        s+=alpha[i]*classifier(bestFeatures[i],img,threshold,polarity)
    if s>=sum(alpha)/2:
        vote=1
    else:
        vote=0
    return vote

def cascade(layers,positiveImg,negativeImg,features,values,start,theta): #given number of rounds in each layer, learn a cascade classifier
    feats=[]
    alphas=[]
    pas=[]
    for layer in layers:
        imgs=positiveImg+negativeImg
        bestFeatures,paras,alpha=learn(positiveImg,negativeImg,features,values,layer,start,theta)
        feats.append(bestFeatures)
        alphas.append(alpha)
        pas.append(paras)
        imgs2=[]
        for img in imgs:
            imgs2.append(img)
        index=0
        for img,label in imgs2:
            if predict(img,alpha,bestFeatures,paras)==0:
                del imgs[index]
                for value in values:
                    del value[index]
                index-=1
            index+=1
        positiveImg=[]
        negativeImg=[]
        for img in imgs:
            if img[1]==1:
                positiveImg.append(img)
            else:
                negativeImg.append(img)
        end = time.time()
        print('Deleting time spent: {:.1f} s'.format(end-start))
    return (feats,alphas,pas)

def test(positiveImg,negativeImg,feats,alphas,pas):
    FP=0
    FN=0
    posNum=len(positiveImg)
    negNum=len(negativeImg)
    imgs=positiveImg+negativeImg
    for i in range(len(feats)):
        if i!=len(feats)-1:
            numDel=0
            numWrong=0
            print('Layer {}:'.format(i+1))
            index=0
            imgs2=[]
            for img in imgs:
                imgs2.append(img)
            for img,label in imgs:
                vote=predict(img,alphas[i],feats[i],pas[i])
                if vote==0:
                    if vote==label:
                        numDel+=1
                    else:
                        numWrong+=1
                    del imgs[index]
                    index-=1
                index+=1
            print('Delete {} faces image, and {} non-faces image'.format(numWrong,numDel))
            FN+=numWrong/(2*posNum)
        else:
            print('Layer {}:'.format(i+1))
            for j in range(len(imgs)):
                vote=predict(imgs[j][0],alphas[i],feats[i],pas[i])
                if vote==0 and imgs[j][1]==1:
                    FN+=1/(2*posNum)
                elif vote==1 and imgs[j][1]==0:
                    FP+=1/(2*negNum)
    print('Total accuracy is {:.3f}, False positive rate is {:.3f}, false negative rate is {:.3f}'.format(1-FP-FN,FP,FN))

def readImg(directory):
    imgs=[]
    for filename in os.listdir(directory):
        img = np.asarray(Image.open(directory + "/" + filename))
        imgs.append(img)
    return imgs

start = time.time()
positiveImg1=readImg(r'dataset\trainset\faces')
negativeImg1=readImg(r'dataset\trainset\non-faces')
positiveImg2=readImg(r'dataset\testset\faces')
negativeImg2=readImg(r'dataset\testset\non-faces')
for i in range(len(positiveImg1)):
    positiveImg1[i]=(integralImage(positiveImg1[i]),1)
for i in range(len(negativeImg1)):
    negativeImg1[i]=(integralImage(negativeImg1[i]),0)
for i in range(len(positiveImg2)):
    positiveImg2[i]=(integralImage(positiveImg2[i]),1)
for i in range(len(negativeImg2)):
    negativeImg2[i]=(integralImage(negativeImg2[i]),0)
features=extractFeature(19,19,8,8)
'''
values1=[]
for feature in features:
    value=[]
    for img,label in imgs:
        value.append(feature.getScore(img))
    values1.append(value)
end = time.time()
print('Preparation spent time: {:.1f} s'.format(end-start))
np.save("data.npy",values1)
'''
values1=np.load("data.npy")
values=values1.tolist()
end = time.time()
print('Preparation spent time: {:.1f} s'.format(end-start))
theta=0.1
layers=[1,5,10,20]
feats,alphas,pas=cascade(layers,positiveImg1,negativeImg1,features,values,start,theta)
print('For training set,')
test(positiveImg1,negativeImg1,feats,alphas,pas)
print('For testing set,')
test(positiveImg2,negativeImg2,feats,alphas,pas)
